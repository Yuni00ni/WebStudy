-- 입출력/변수/자료형/형변환/연산자

1. JS : 웹페이지에 동적 기능을 제작할 때 사용
  - 동적 기능(알림, 팝업창 등등)

2. HTML : 페이지의 뼈대(이미지, 글자 등등)

3. CSS : 페이지의 디자인(글자색, 폰트 크기 등등)

4. JS를 사용하기 위해서 HTML파일 안에 <script>
  -> body 안에 -> </body>위에
=> 외부 방식 -> .js파일과 .html 파일 분리

5. 출력문 3가지

- document.write(); : 웹페이지에 출력

- console.log(); : 콘솔창(F12 개발자 도구)에 출력
  -> 개발자가 주로 사용

- alert(); : 사용자에게 확인(true) or 취소(false)
  -> 데이터 타입이 boolean

6. 입력문 2가지

- prompt(); : 사용자에게 직접 입력창을 제공
  -> 사용자가 숫자, 문자를, 무엇을 입력해도 리턴 데이터는 String

- confirm(); : 사용자에게 확인(true) or 취소(false)
  -> 사용자에게 주로 사용

7. 변수와 상수

- 변수 : 변해도 되는 값을 저장하는 공간

- 상수 : 변하면 안되는 값 ex) 주민등록번호, 만렙 등

- 변수 키워드 (2개, var & let)
  - var : js 초창기에 나왔던 변수 키워드 -> 현재 권장 X
    -> 이유 : 변수명이 중복 O(호이스팅 현상)
	    코드의 일관성이 떨어짐
  - let : ECMA6 이후로 등장 -> 현재 국제 표준, 권장사항
    -> 이유 : 변수명 중복 X, 재할당 가능

- 상수 키워드(1개, const)
  - const : 변수명 중복 X, 재할당 X

8. 자료형 : 데이터 타입을 가르키는 방식

- 문자 : '', "" 를 사용하면 모두 문자열로 인식

- 숫자 : 정수, 실수 모두 숫자로 인식

- 논리 : true, false 구분

- null : 값이 의도적으로 비어있다. / let num = null;

- undefiend : 값이 존재하지 않다. / let num;

9. 연산자

- 비교연산자 : == (동등, 값만 비교) 
	     === ( 일치, 값과 자료형까지 비교)

- 삼항연산자 : 조건문 ? 실행문1(true) : 실행문2(false)


## 조건문/반복문

1. 조건문 : 특정 조건이 성립했을 때 실행
	  성립하지 않으면다른 조건을 처리

- 단순 if문, if else문, switch문, 다중if문(else-if문)
  - 구조 : if(조건식) -> true, false 나오는 결과값

2. 반복문 : 특정 코드를 반복해서 실행하는 문법

- for문 : 반복 횟수를 알 때 사용
  - 구조 : for(let i = 0; i < 범위 ; i++){로직}
    - 키포인트 : for문은 배열이랑 자주 잘 쓰인다.
      -> 배열은 인덱스로 접근을 하고 그 인덱스 0부터 1씩
         -> 배열의 길이 구분 : length

- while문 : 반복 횟수를 모를 때 사용
  - 구조 : while(조건식)
    - 키포인트 : break문이 같이 사용
      -> 반복이 언제까지 되는지 모르기 때문에 조건식에 종료될 조건이 포함이 되지 않는다면 break문을 통해서 반복문을 빠져나올 수 있도록 해주는 구문

## 배열/함수/객체

1. 함수 : 특정 기능을 개발자가 제작해서 필요할 때 마다 
	호출해서 사용
  - () 를 뒤에 붙여야지 함수라는 뜻(나 기능이야~)

- 함수선언문 : function 함수명(매개변수) {로직}

- 함수표현식 : const 함수명 = function(매개변수){로직}

- 화살표함수 : const 함수명 = (매개변수) => {로직} (자주 사용)
  - 키포인트 : return -> 순수값 or 값을 가지고 연산하고 싶을 때

2. 배열 vs 객체

- 배열 : 같은 데이터타입을 가진 데이터를 한 곳에 모아서 관리하는 방법 / []
  - 키포인트 : 배열은 데이터를 조회할 때 [인덱스번호]
  - 주의점 : 인덱스는 0부터 시작

- 객체 : 다른 데이터타입을 가진 데이터를 한 곳에 모아서 관리하는 방법 / {}
  - 키포인트 : {} 사용 / 키와 값으로 구성 {key : value}
  - 유사데이터 : 파이썬의 딕셔너리
  - 접근 : 객체명.key(속성명)

    -> 접근법 : 배열 [인덱스] / 객체 .key
    => 우리가 보는 데이터들은 배열 안에 객체, 객체 안에 배열

## DOM

1. DOM의 개념
  - html 파일을 태그, 속성, 컨텐츠 별로 따로 쪼갬
  - 이유 : 각각 따로 접근을 해서 제어하기 위해서
  - 핵심 : 모든 정보를 알고 있는 객체 document

2. 접근법 2가지
  - id를 활용하는 경우(단수)
    -> document.getElementById('id값');

  - class를 활용하는 경우(복수)
    -> document.getElementsByClassName('class값');
    -> class가 여러개면 값도 여러개가 넘어옴
      -> 배열 형태(유사배열 : HTMLCollection)
      -> 인덱스 활용 -> for문 사용 가능

3. 요소의 컨텐츠(내용)만 가지고 오려면?
  - 요소.innerText
    -> 수정 : '=' 수정할 값

3-1. 요소를 다른 요소로 바꾸고 싶어요
  - 요소.innerHTML

4. 함수 연결

- 인라인
  -> 태그에 직접 함수를 연결하는 방법(권장 X)
    -> 간단한 함수 정도는 괜찮음

- 이벤트리스너
  -> JS 안에서 모든 코드를 처리하는 방식(권장 O)

- 익명 함수 
  -> 이름이 없는 함수 : 다른 곳에서 부를 수가 없음
    -> 한 번만 불러서 사용할 수가 있음

